#!/usr/bin/env bash
set -e
function help(){
    cat <<EOT
Usage:
  ghinst [(-h|--help)] [(-d|--install-dir) dir] repository
Options:
  -h, --help        Displays this information
  -d, --install-dir Install directory (abusolute or relative path) (Default: $HOME/bin)
  -v, --verbose     Verbose
EOT
    exit 1;
}

for OPT in "$@"
do
    case "$OPT" in
        '-h' | '--help' )
            help
            ;;
        '-d' | '--install-dir' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "option requires an argument: $1" 1>&2
                exit 1
            fi
            install_dir="$2"
            shift 2
            ;;
        '-v' | '--verbose' )
          set -x
          verbose=1
          shift
          ;;
        -*)
            echo "illegal option: $1" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
                repo=$1
                shift 1
            fi
            ;;
    esac
done

if [ -z $repo ]; then
    echo "reposity name is required" 1>&2
    exit 1
fi

if [[ "$repo" =~ (https?://[^/]+)/([^/]+/[^/]+) ]]; then
  url="$repo"
  gh_url="${BASH_REMATCH[1]}"
  repo=${BASH_REMATCH[2]}
else
  url="https://github.com/$repo"
  gh_url='https://github.com'
fi

# set default values
if [ -z "$install_dir" ]; then
    install_dir="$HOME/bin"
fi

os=`uname | tr "A-Z" "a-z"`
case `uname -a` in
    *64*)
        architecture='amd64'
        ;;
    *)
        architecture='386'
        ;;
esac

if type curl 1>/dev/null 2>&1;then
    downloader='curl -skLR'
elif type wget 1>/dev/null 2>&1;then
    downloader='wget --no-check-certificate -O -'
else
    echo 'Please install curl or wget.'
    exit 1
fi

# releasesページからダウンロードパスを抜き取る
# APIを使うてもあるが、JSONをパースする必要あり
# [Releases | GitHub API](https://developer.github.com/v3/repos/releases/#get-the-latest-release)
# 例）
# curl 'https://api.github.com/repos/peco/peco/releases/latest'

pattern="/${repo}/releases/download/[^/]\+/.\+${os}_${architecture}[^\"]\+"
# /を\でエスケープ
pattern=${pattern//\//\\/}
dl_path=`$downloader "${url}/releases" | sed -n "1,$pattern/s/.*\($pattern\).*/\1/p"`
#                                                ------------
#                                                     |
#                                                     +-- 一番最初にマッチしたもの（最新のバージョン）に限定


if [ -z "$dl_path" ];then
  # ダウンロードパスが取れなかった時はアーキテクチャを抜いて再挑戦
  pattern="/${repo}/releases/download/[^/]\+/.\+${os}[^\"]\+"
  pattern=${pattern//\//\\/}
  dl_path=`$downloader "${url}/releases" | sed -n "1,$pattern/s/.*\($pattern\).*/\1/p"`

  if [ -z "$dl_path" ];then
      echo "Can't get download url"
      exit 1
  fi
fi

tmpdir=`mktemp -d /tmp/ghinst.XXXXXX`
pushd $tmpdir >/dev/null

file=${dl_path##*/}
$downloader "${gh_url}${dl_path}" > $file

case $file in
    *tar.gz)
        gzip -dc $file | tar xvf -
        ;;
    *zip)
        unzip $file > /dev/null
        ;;
    *)
        echo 'unknown extension'
        exit 1
        ;;
esac

dir=`echo $file | sed -e 's/^\([^.]\+\).*$/\1/'`
cmd=`echo $file | sed -e 's/^\([^._]\+\).*$/\1/'`
popd >/dev/null

if test -f ${tmpdir}/${dir}/${cmd}; then
    mv ${tmpdir}/${dir}/${cmd} $install_dir
elif test -f ${tmpdir}/${cmd}; then
    mv ${tmpdir}/${cmd} $install_dir
else
    echo "Can't find command!"
    exit 1
fi

rm -r $tmpdir
echo "$cmd is installed to $install_dir"
